---
description: 
globs: 
alwaysApply: false
---

# Your rule content

[guide-intro.md](mdc:docs/guide-intro.md)

# 페이지 계증 흐름 가이드

[task-detail-flow.md](mdc:docs/task-detail-flow.md)

# ui guide sample

[task-detail-ui.svg](mdc:docs/task-detail-ui.svg)

[image-detail-modal.svg](mdc:docs/image-detail-modal.svg)

# Svelte 프론트엔드 구현 작업 계획

스마트 문서 기반 영수증 처리 시스템을 위한 Svelte 프론트엔드 구현 계획을 수정했습니다. 보고서와 분석 관련 엔드포인트를 제거하고 Task, Image, Receipt 모델을 효과적으로 다루는 UI 구성으로 변경했습니다.

## API 서버 주요 엔드포인트 참조

### Auth API 엔드포인트 (Swagger 기준, Auth API 서버: http://facreport.iptime.org:5009)
- `POST /api/v1/auth/login` - 로그인 (이메일/비밀번호 필요)
- `POST /api/v1/auth/register` - 회원가입
- `POST /api/v1/auth/refresh` - 토큰 갱신
- `GET /api/v1/auth/me` - 현재 사용자 정보 조회
- `POST /api/v1/auth/logout` - 로그아웃

### Task API 엔드포인트 (Swagger 기준, Main API 서버: http://facreport.iptime.org:5008)
- `GET /api/v1/tasks` - 태스크 목록 조회
- `GET /api/v1/tasks/{id}` - 특정 태스크 상세 조회
- `POST /api/v1/tasks` - 새 태스크 생성
- `PUT /api/v1/tasks/{id}` - 태스크 업데이트
- `DELETE /api/v1/tasks/{id}` - 태스크 삭제

### Image API 엔드포인트 (Swagger 기준, Main API 서버: http://facreport.iptime.org:5008)
- `GET /api/v1/main/tasks/{task_id}/images` - 태스크별 이미지 목록 조회
- `GET /api/v1/main/images/{id}` - 특정 이미지 상세 조회
- `POST /api/v1/main/tasks/{task_id}/images` - 이미지 업로드
- `PUT /api/v1/main/images/{id}` - 이미지 정보 업데이트
- `DELETE /api/v1/main/images/{id}` - 이미지 삭제
- `POST /api/v1/main/images/{image_id}/receipt-area` - **영수증 영역 생성**
- `PATCH /api/v1/main/images/{image_id}/receipt-area` - **영수증 영역 선택**
- `POST /api/v1/main/images/{image_id}/ocr` - **영수증의 문자열 추출**

### Receipt API 엔드포인트 (Swagger 기준, Main API 서버: http://facreport.iptime.org:5008)
- `GET /api/v1/main/images/{image_id}/receipts` - 이미지별 영수증 목록 조회
- `GET /api/v1/main/receipts/{id}` - 특정 영수증 상세 조회
- `POST /api/v1/main/images/{image_id}/receipts` - 영수증 정보 추가
- `PUT /api/v1/main/receipts/{id}` - 영수증 정보 업데이트
- `DELETE /api/v1/main/receipts/{id}` - 영수증 정보 삭제
- `POST /api/main/v1/main//receipts/{receipt_id}/gpt-analysis` - **Analyze Receipt With Gpt**

---

## 1일차: Svelte 환경 구성 및 프로젝트 구조

### 개발 환경 설정

- [ ] Node.js 및 npm 설치 확인 (Node.js 18.x 이상 권장)
- [ ] Svelte 프로젝트 생성
  ```bash
  npm create svelte@latest facreport-app
  cd facreport-app
  ```
- [ ] 기본 의존성 설치
  ```bash
  npm install
  ```
- [ ] 추가 필요 라이브러리 설치
  ```bash
  npm install axios uuid date-fns
  ```
- [ ] UI 라이브러리/스타일링 도구 설치
  ```bash
  npm install -D tailwindcss postcss autoprefixer
  npx tailwindcss init -p
  ```

### 프로젝트 구조 설정

- [ ] 기본 디렉토리 구조 확인
- [ ] lib 디렉토리 내 하위 폴더 생성
  ```bash
  mkdir -p src/lib/{api,components/{ui,features,layout},stores,utils,constants}
  ```
- [ ] routes 디렉토리 설정
  ```bash
  mkdir -p src/routes/{(auth)/{login,register},(protected)/{tasks,images,receipts}}
  ```

### 환경 변수 설정

- [ ] `.env` 파일 생성
  ```
  PUBLIC_MAIN_API_URL=http://facreport.iptime.org:8006
  PUBLIC_AUTH_API_URL=http://facreport.iptime.org:8007
  ```

### API 클라이언트 초기 설정

- [ ] `src/lib/api/auth.js` 파일 생성 (인증 API 클라이언트)
- [ ] `src/lib/api/main.js` 파일 생성 (메인 API 클라이언트)
- [ ] 인터셉터 설정 (`src/lib/api/interceptors.js`)

### 기본 스토어 설정

- [ ] `src/lib/stores/auth.js` 생성 (인증 관련 상태)
- [ ] `src/lib/stores/app.js` 생성 (앱 상태)
- [ ] `src/lib/stores/tasks.js` 생성 (태스크 관련 상태)
- [ ] `src/lib/stores/images.js` 생성 (이미지 관련 상태)
- [ ] `src/lib/stores/receipts.js` 생성 (영수증 관련 상태)

### 1일차 작업 검증

- [ ] 개발 서버 실행
  ```bash
  npm run dev
  ```
- [ ] 브라우저에서 `http://localhost:5173` 접속하여 기본 Svelte 페이지 확인
- [ ] 콘솔 오류 없이 정상 실행되는지 확인

---

## 2일차: 인증 기능 구현 (Auth API 통합)

### 인증 스토어 구현

- [ ] `src/lib/stores/auth.js` 완성
  - [ ] 인증 상태 (isAuthenticated)
  - [ ] 사용자 정보 (user)
  - [ ] 로딩 상태 (loading)
  - [ ] 오류 상태 (error)

### Auth API 클라이언트 완성

- [ ] `src/lib/api/auth.js` 완성
  - [ ] login 함수 구현
  - [ ] register 함수 구현
  - [ ] logout 함수 구현
  - [ ] getCurrentUser 함수 구현
  - [ ] refreshToken 함수 구현

### 인증 화면 구현

- [ ] 로그인 페이지 (`src/routes/(auth)/login/+page.svelte`)
  - [ ] 폼 레이아웃 
  - [ ] 상태 관리 연결
  - [ ] API 통합
  - [ ] 오류 처리
- [ ] 회원가입 페이지 (`src/routes/(auth)/register/+page.svelte`)
  - [ ] 폼 레이아웃
  - [ ] 상태 관리 연결
  - [ ] API 통합
  - [ ] 오류 처리

### 인증 레이아웃 구현

- [ ] 레이아웃 로직 (`src/routes/+layout.js`)
  - [ ] 인증 상태 체크
  - [ ] 보호된 경로 처리
  - [ ] 로그인/로그아웃 리다이렉션

### 2일차 작업 검증

- [ ] 개발 서버에서 로그인 페이지 확인
- [ ] 로그인 기능 테스트
- [ ] 회원가입 기능 테스트
- [ ] 비인증 상태에서 보호된 경로 접근 시 리다이렉션 확인

---

## 3일차: 핵심 UI 컴포넌트 및 레이아웃

### 레이아웃 컴포넌트 구현

- [ ] 레이아웃 컴포넌트 구현
  - [ ] 기본 레이아웃 (`src/routes/+layout.svelte`)
  - [ ] 인증 상태에 따른 레이아웃 변경
  - [ ] 다크모드 지원
- [ ] 사이드바 컴포넌트 (`src/lib/components/layout/Sidebar.svelte`)
  - [ ] 네비게이션 링크
  - [ ] 토글 기능
  - [ ] 반응형 디자인
- [ ] 네비게이션 바 (`src/lib/components/layout/Navbar.svelte`)
  - [ ] 사용자 메뉴
  - [ ] 검색 기능 (선택사항)

### 공통 UI 컴포넌트 구현

- [ ] 버튼 컴포넌트 (`src/lib/components/ui/Button.svelte`)
- [ ] 입력 필드 컴포넌트 (`src/lib/components/ui/Input.svelte`)
- [ ] 카드 컴포넌트 (`src/lib/components/ui/Card.svelte`)
- [ ] 로딩 인디케이터 (`src/lib/components/ui/Loading.svelte`)
- [ ] 모달 컴포넌트 (`src/lib/components/ui/Modal.svelte`)
- [ ] 드롭존 컴포넌트 (`src/lib/components/ui/Dropzone.svelte`) - 이미지 업로드용

### 애플리케이션 스토어 구현

- [ ] 앱 스토어 완성 (`src/lib/stores/app.js`)
  - [ ] 다크 모드 설정
  - [ ] 사이드바 상태

### 3일차 작업 검증

- [ ] 개발 서버에서 레이아웃 확인
- [ ] 반응형 디자인 테스트 (모바일, 태블릿, 데스크톱)
- [ ] 다크모드 토글 기능 테스트
- [ ] 사이드바 토글 기능 테스트
- [ ] UI 컴포넌트 스타일 및 동작 확인

---

## 4일차: 태스크 관리 기능 구현

### Main API 태스크 클라이언트 완성

- [ ] `src/lib/api/task.js` 완성
  - [ ] getTasks 함수 구현
  - [ ] getTaskById 함수 구현
  - [ ] createTask 함수 구현
  - [ ] updateTask 함수 구현
  - [ ] deleteTask 함수 구현

- [ ] `src/lib/api/image.js` 부분 구현
  - [ ] getImagesByTaskId 함수 구현 - 새로 추가
  - [ ] getImageById 함수 구현
  - [ ] uploadImage 함수 구현 (태스크 ID 연결)

### 태스크 관련 화면 구현

- [ ] 태스크 목록 페이지 (`src/routes/(protected)/tasks/+page.svelte`)
  - [ ] 테이블/카드 레이아웃
  - [ ] 정렬 및 필터링
  - [ ] 페이지네이션
  - [ ] 검색 기능
- [ ] 태스크 상세 페이지 (`src/routes/(protected)/tasks/[id]/+page.svelte`)
  - [ ] 태스크 정보 표시
  - [ ] 편집 기능
  - [ ] 삭제 기능
  - [ ] **이미지 목록 통합 섹션**  
  - [ ] 이미지 목록 그리드/갤러리 뷰
  - [ ] 이미지 필터링 (상태별)
  - [ ] 이미지 정렬 (날짜/크기별)
  - [ ] 이미지 검색 기능
  - [ ] 이미지 업로드 버튼 (해당 태스크에 직접 연결)
  - [ ] 이미지 카드 클릭 시 상세 정보 모달
  - [ ] 이미지별 영수증 정보 요약 표시
- [ ] 태스크 생성 페이지 (`src/routes/(protected)/tasks/new/+page.svelte`)
  - [ ] 폼 구현
  - [ ] 유효성 검사
  - [ ] 제출 처리

### 태스크 및 이미지 스토어 구현

- [ ] `src/lib/stores/tasks.js` 완성
  - [ ] 태스크 목록 상태
  - [ ] 현재 태스크 상태
  - [ ] 로딩/오류 상태
  - [ ] CRUD 액션

- [ ] `src/lib/stores/images.js` 부분 구현
  - [ ] 태스크별 이미지 목록 상태 - 새로 추가
  - [ ] 이미지 로딩 상태
  - [ ] 이미지 업로드 상태 및 진행률

### 이미지 관련 컴포넌트 구현

- [ ] `src/lib/components/features/TaskImages.svelte`
  - [ ] 태스크별 이미지 목록 그리드 표시
  - [ ] 필터링 및 정렬 컨트롤
  - [ ] 페이지네이션
  - [ ] 검색 기능

- [ ] `src/lib/components/features/ImageCard.svelte`
  - [ ] 이미지 썸네일 표시
  - [ ] 이미지 기본 정보 표시 (파일명, 크기, 날짜)
  - [ ] 연결된 영수증 개수 표시
  - [ ] 액션 메뉴 (상세보기, 삭제 등)

- [ ] `src/lib/components/features/ImageUpload.svelte`
  - [ ] 드래그 앤 드롭 기능
  - [ ] 다중 파일 업로드
  - [ ] 업로드 진행 상태
  - [ ] 태스크 ID 자동 연결

### 4일차 작업 검증

- [ ] 개발 서버에서 태스크 목록 페이지 확인
- [ ] 태스크 생성 기능 테스트
- [ ] 태스크 상세 정보 조회 테스트
- [ ] 태스크 상세 페이지에서 이미지 목록 표시 확인
- [ ] 태스크에 이미지 업로드 기능 테스트
- [ ] 태스크 편집 및 삭제 기능 테스트

---

## 5일차: 이미지 관리 기능 구현

### 이미지 API 클라이언트 완성

- [ ] `src/lib/api/image.js` 완성
  - [ ] getImages 함수 구현
  - [ ] getImageById 함수 구현
  - [ ] uploadImage 함수 구현
  - [ ] updateImage 함수 구현
  - [ ] deleteImage 함수 구현
  - [ ] getImageWithReceipts 함수 구현

### 이미지 관련 화면 구현

- [ ] 이미지 목록 컴포넌트 (`src/lib/components/features/ImageList.svelte`)
  - [ ] 그리드/갤러리 뷰
  - [ ] 이미지 썸네일 표시
  - [ ] 업로드 버튼
  - [ ] 이미지 선택 기능
- [ ] 이미지 상세 페이지 (`src/routes/(protected)/images/[id]/+page.svelte`)
  - [ ] 이미지 표시
  - [ ] 이미지 메타데이터 표시
  - [ ] 이미지 편집 기능
  - [ ] 영수증 정보 표시
  - [ ] 연결된 태스크 정보 표시
  - [ ] 태스크로 돌아가기 링크
- [ ] 이미지 모달 컴포넌트 (`src/lib/components/features/ImageModal.svelte`)
  - [ ]이미지 전체 화면 표시
  - [ ]메타데이터 사이드 패널
  - [ ]영수증 목록 사이드 패널
  - [ ]이미지 액션 메뉴
- [ ] 이미지 업로드 컴포넌트 (`src/lib/components/features/ImageUpload.svelte`)
  - [ ] 드래그 앤 드롭 기능
  - [ ] 다중 파일 업로드
  - [ ] 업로드 진행 상태
  - [ ] 오류 처리

### 이미지 스토어 완성 및 영수증 스토어 부분 구현

- [ ] `src/lib/stores/images.js` 완성
  - [ ] 현재 이미지 상태
  - [ ] 이미지 편집 상태
  - [ ] CRUD 액션
- [ ] `src/lib/stores/receipts.js` 부분 구현
  - [ ] 이미지별 영수증 목록 상태
  - [ ] 현재 영수증 상태
  - [ ] 영수증 생성 상태

### 테스크 상세 페이지 내 이미지 관리 기능 강화

- [ ] 이미지 일괄 작업 컴포넌트 (`src/lib/components/features/BatchImageActions.svelte`)
  - [ ] 다중 이미지 선택 기능
  - [ ] 선택된 이미지 일괄 삭제
  - [ ] 선택된 이미지 상태 일괄 변경
- [ ] 이미지 필터 컴포넌트 (`src/lib/components/features/ImageFilters.svelte`)
  - [ ] 상태별 필터링 (활성화, 숨김, 비활성화)
  - [ ] 날짜 범위 필터링
  - [ ] 영수증 유무 필터링

### 5일차 작업 검증

- [ ] 개발 서버에서 이미지 목록 확인
- [ ] 이미지 업로드 기능 테스트
- [ ] 이미지 상세 보기 테스트
- [ ] 이미지 편집 및 삭제 기능 테스트

---

## 6일차: 영수증 관리 기능 구현

### 영수증 API 클라이언트 완성

- [ ] `src/lib/api/receipt.js` 완성
  - [ ] getReceipts 함수 구현
  - [ ] getReceiptById 함수 구현
  - [ ] createReceipt 함수 구현
  - [ ] updateReceipt 함수 구현
  - [ ] deleteReceipt 함수 구현

### 영수증 관련 화면 구현

- [ ] 영수증 목록 컴포넌트 (`src/lib/components/features/ReceiptList.svelte`)
  - [ ] 테이블/카드 레이아웃
  - [ ] 정렬 및 필터링
  - [ ] 영수증 요약 정보 표시
- [ ] 영수증 상세 페이지 (`src/routes/(protected)/receipts/[id]/+page.svelte`)
  - [ ] 영수증 정보 표시
  - [ ] 원본 이미지 표시
  - [ ] 편집 기능
  - [ ] 삭제 기능
- [ ] 영수증 편집 폼 (`src/lib/components/features/ReceiptForm.svelte`)
  - [ ] 영수증 데이터 입력 필드
  - [ ] 유효성 검사
  - [ ] 제출 처리

### 영수증 스토어 완성

- [ ] `src/lib/stores/receipts.js` 완성
  - [ ] 영수증 목록 상태
  - [ ] 현재 영수증 상태
  - [ ] 로딩/오류 상태
  - [ ] CRUD 액션

### 영수증 시각화 컴포넌트

- [ ] 영수증 OCR 영역 표시 컴포넌트 (`src/lib/components/features/ReceiptOcrView.svelte`)
  - [ ] 이미지 위에 영역 표시
  - [ ] 영역 선택 및 편집
  - [ ] 인식된 텍스트 하이라이트

### 6일차 작업 검증

- [ ] 개발 서버에서 영수증 목록 확인
- [ ] 영수증 생성 기능 테스트
- [ ] 영수증 상세 정보 조회 테스트
- [ ] 영수증 편집 및 삭제 기능 테스트
- [ ] OCR 영역 표시 기능 테스트

---

## 7일차: 대시보드, 오류 처리, 최적화 및 배포

### 대시보드 구현

- [ ] 대시보드 페이지 (`src/routes/(protected)/dashboard/+page.svelte`)
  - [ ] 태스크 요약 카드
  - [ ] 최근 업로드 이미지
  - [ ] 영수증 통계 (총액, 개수 등)
  - [ ] 사용자 활동 요약

### 전역 오류 처리 시스템 개선

- [ ] 전역 오류 핸들러 구현
- [ ] 오류 발생 시 사용자 알림 표시
- [ ] API 오류 코드별 특정 처리 추가

### 성능 최적화

- [ ] 코드 분할 구현
- [ ] 이미지 최적화 (lazy loading)
- [ ] 불필요한 리렌더링 방지
- [ ] 캐시 전략 수립

### 배포 준비

- [ ] 환경 변수 설정 확인
- [ ] 빌드 스크립트 확인
- [ ] 빌드 테스트
  ```bash
  npm run build
  ```
- [ ] 배포 환경 설정 (Node.js 또는 정적 호스팅)

### 문서화

- [ ] README 업데이트
- [ ] API 통합 문서화
- [ ] 컴포넌트 사용법 문서화
- [ ] 배포 가이드 작성

### 7일차 작업 검증

- [ ] 대시보드 기능 테스트
- [ ] 전체 애플리케이션 흐름 테스트
- [ ] 성능 및 반응성 확인
- [ ] 빌드 결과물 검증
- [ ] 문서 완성도 확인

## 상용 서비스에서 채택하는 방법 및 추가 고려사항

### 프론트엔드 아키텍처 패턴

1. **컴포넌트 기반 설계**
   - 재사용 가능한 UI 컴포넌트를 만들어 개발 효율성 향상
   - 스토리북(Storybook)을 도입하여 컴포넌트 문서화 고려

2. **상태 관리 전략**
   - Svelte 자체 스토어를 사용하여 간결한 상태 관리
   - 대규모 애플리케이션으로 확장 시 Pinia나 Redux 도입 고려

3. **API 통신 패턴**
   - 요청/응답 인터셉터 활용으로 일관된 오류 처리
   - 캐시 전략 사용으로 중복 요청 최소화

### 최신 개발 트렌드

1. **점진적 향상 기법(Progressive Enhancement)**
   - 기본 기능부터 구현 후 고급 기능 추가
   - 오프라인 지원을 위한 서비스 워커 고려

2. **마이크로 프론트엔드 고려**
   - 확장성을 위해 독립적으로 배포 가능한 기능 단위로 설계
   - 페이지/기능별 지연 로딩 구현

3. **접근성(Accessibility) 고려**
   - WCAG 2.1 가이드라인 준수
   - 스크린 리더 지원 및 키보드 네비게이션 구현

### 성능 최적화 기법

1. **코드 분할(Code Splitting)**
   - 라우트 기반 지연 로딩 구현
   - 큰 라이브러리는 별도 청크로 분리

2. **이미지 최적화**
   - 이미지 압축 및 적절한 포맷 사용
   - 반응형 이미지 및 지연 로딩 구현
   - WebP 형식 활용

3. **캐싱 전략**
   - 정적 자산 캐싱
   - API 응답 캐싱

### 배포 및 운영 전략

1. **CI/CD 파이프라인**
   - GitHub Actions 또는 GitLab CI 설정
   - 자동화된 테스트 및 배포

2. **컨테이너화**
   - Docker를 사용한 일관된 환경
   - Kubernetes 배포 고려

3. **모니터링**
   - Sentry 또는 LogRocket을 통한 오류 추적
   - 사용자 행동 분석을 위한 이벤트 로깅

### 보안 강화 방안

1. **HTTPS 적용**
   - 모든 API 통신에 HTTPS 사용

2. **인증 토큰 보안**
   - JWT 토큰 안전한 저장
   - 자동 토큰 갱신 메커니즘

3. **입력 데이터 검증**
   - 프론트엔드에서 모든 사용자 입력 유효성 검사
   - XSS 방지를 위한 특수문자 처리

### 추가 기능 제안

1. **영수증 데이터 시각화**
   - 지출 분석 차트 및 그래프
   - 시간별/카테고리별 지출 분석

2. **사용자 설정**
   - 개인화된 대시보드 레이아웃
   - 알림 설정 기능

3. **협업 기능**
   - 팀원 간 태스크 공유
   - 코멘트 및 알림 시스템
